entity = {
    player: undefined,
    cursors: undefined,
    worldLayer: undefined,
  }
  
  const config = {
      type: Phaser.AUTO, // Which renderer to use
      width: 160, // Canvas width in pixels
      height: 160, // Canvas height in pixels
      parent: "game-container", // ID of the DOM element to add the canvas to
      physics: {
        default: "arcade",
        arcade: {
          gravity: { y: 300 } // Top down game, so no gravity
        }
      },
      scene: {
        preload: preload,
        create: create,
        update: update
      }
  };
  
  const game = new Phaser.Game(config);
  
  function preload() {
    // Runs once, loads up assets like images and audio
    this.load.image("mario-tiles", "../assets/tilesets/super-mario-tiles.png");
    this.load.tilemapTiledJSON("map", "../assets/tilemaps/map.json");
    this.load.atlas('emily',  '../assets/atlast/emily.png', '../assets/atlast/emily.json');
  }
  
  function create() {
    // Runs once, after all assets in preload are loaded
  
  
  
    // When loading from an array, make sure to specify the tileWidth and tileHeight
    const map = this.make.tilemap({ key: "map" });
    // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in
    // Phaser's cache (i.e. the name you used in preload)
    const tileset = map.addTilesetImage("world01", "mario-tiles");
  
    // Parameters: layer name (or index) from Tiled, tileset, x, y
    const belowLayer = map.createDynamicLayer("Below Player", tileset, 0, 0);
    const worldLayer = map.createDynamicLayer("World", tileset, 0, 0);
    const aboveLayer = map.createDynamicLayer("Above Player", tileset, 0, 0);
  
    entity.worldLayer = worldLayer;
  
    worldLayer.setCollisionByProperty({ collides: true });
  
  
    var player = player = this.physics.add.sprite(16, 16, "emily", "idle1");
    entity.player = player;
    
  
    var idleFrames = this.anims.generateFrameNames('emily', {
        start: 1, end: 3, zeroPad: undefined,
        prefix: 'idle', suffix: ''
    });
    var walkFrames = this.anims.generateFrameNames('emily', {
        start: 1, end: 4, zeroPad: undefined,
        prefix: 'walk', suffix: ''
    });
  
    this.anims.create({
      key: 'idle',
      frames: idleFrames,
      frameRate: 7,
      repeat: -1,
    });
    this.anims.create({
      key: 'walk',
      frames: walkFrames,
      frameRate: 7,
      repeat: -1,
    });
  
    player.anims.play('idle');
    player.anims.play('walk');
  
    this.physics.add.collider(player, worldLayer);
  
    const debugGraphics = this.add.graphics().setAlpha(0.75);
    worldLayer.renderDebug(debugGraphics, {
      tileColor: null, // Color of non-colliding tiles
      collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255), // Color of colliding tiles
      faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Color of colliding face edges
    });
    
    // Phaser supports multiple cameras, but you can access the default camera like this:
    const camera = this.cameras.main;
  
    // Set up the arrows to control the camera
    const cursors = this.input.keyboard.createCursorKeys();
    controls = new Phaser.Cameras.Controls.FixedKeyControl({
      camera: camera,
      left: cursors.left,
      right: cursors.right,
      up: cursors.up,
      down: cursors.down,
      speed: 0.5
    });
  
    entity.cursors = cursors;
  
    // Constrain the camera so that it isn't allowed to move outside the width/height of tilemap
    camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);
  }
  
  function update(time, delta) {
    // Runs once per frame for the duration of the scene
      // Apply the controls to the camera each update tick of the game
      //controls.update(delta);
  
  
    // Stop any previous movement from the last frame
    var player = entity.player;
    var cursors = entity.cursors;
  
    player.body.setVelocityX(0);
  
    // Horizontal movement
    if (cursors.left.isDown) {
      player.body.setVelocityX(-100);
      
    } else if (cursors.right.isDown) {
      player.body.setVelocityX(100);
      
    } else {
      
    }
  
    // Vertical movement
    // if (cursors.up.isDown) {
    //   player.body.setVelocityY(-100);
    // } else if (cursors.down.isDown) {
    //   player.body.setVelocityY(100);
    // }
  
    // Normalize and scale the velocity so that player can't move faster along a diagonal
    player.body.velocity.normalize().scale(60);
  
  
  
    // Convert the mouse position to world position within the camera
    const worldPoint = this.input.activePointer.positionToCamera(this.cameras.main);
  
    // Draw tiles (only within the groundLayer)
    if (this.input.manager.activePointer.isDown) {
      entity.worldLayer.putTileAtWorldXY(40, worldPoint.x, worldPoint.y);
    }
  }